#матрица - это прямоуг.таблица составл.из элемнтов отдного типа
#(чисел, строк и тд)Питон не имеет встроенного типа данных для матриц, но можно
#рассматривать список как матрицу
A = [[1, 4, 5],
     [-5, 8, 9]]
print(A)

#Для создания матрицы нужно ввзять пустой список, а затем в цикле добавлять к нему новый строки
# с помощью метода append()
n = 3           #строки
m = 2       #столбики
a = []
for i in range(n):
    a.append([0] * m)

#Также можно создать с помощью генератора

n = 3
m = 2
a = [[0] * m for i in range(n)]

#как работает вложенный список вложенный список

a = [[1, 4, 5, 12],
     [-5, 8, 9, 8],
     [-6, 7, 11, 19]]
print("a =", a)
print("a[1] =", a[1])    #вторая сторка
print("a[1][2] =", a[1][2])     #третья элемент второй строки
print("a[0][-1] =", a[0][-1])   #послед.элемент первой строки

column = []      #пустой список
for row in a:
    column.append(row[2])

print("3rd column =", column)

#для обработки и вывода, использ.два влож.цикла.
# 1-ый перебирает номер строки, 2-й бежит по элементам внутри строки
#Пример: вывести двумерный числовой список на экран построчно,
# разделяя числа пробелами внутри одной строки

a = [[1, 2, 3, 4], [5, 6], [7, 8, 9, ]]
for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j], end=' ')
    print()

#После создани матрицы можно её заполнить произвольными значениями,
# т.к. каждый элемент имеет два индекса, то необходимо испол.влож.циклы

n = 3
m = 2
a = [[0] * m for i in range(n)]
for i in range(n):
    for j in range(m):
        a[i][j] = 2
# Исключение а = 100/0, исклю-я нужны, чтобы сообщать ошибку
#BaseException - базоввое искл., от которого берут начало все остал-е
# SystemExit -порождаемое функции sys.exit при выходе из программы
# KeyboardInterrupt - порождается при прерывании программы пользователем
# Exception  - то, на чем фактически строятся все остальные ошибки
# StopIteration - порождается встроенной функц.next, если в итераторе больше нет элементов
# ArithmeticError - арифметическая ошибка
# FloatingPointError - порождается при неудачном выполнении операции с плавающей запятой
# OverflowError - возникает, когда рез.арифмет.операции слишком велик для представления
# ZeroDivisionError - деление на ноль

#Конепция Try - except- использ.для обработки исключений

try:                #выполняем инструкцию, которая может породить исключение
    k = 1 / 0
except ZeroDivisionError:   #в этом блоке перехватываем их, как исключение так и его потомки
    k = 0
print(k)

#Примеры
my_dict = {"a": 1, "b": 2, "c": 3}
try:
    value = my_dict["d"]
except KeyError:
    print("Ключа не существует")

my_list = [1, 2, 3, 4, 5]
try:
    my_list[6]
except IndexError:
    print("Этого индекса нет в списке")

